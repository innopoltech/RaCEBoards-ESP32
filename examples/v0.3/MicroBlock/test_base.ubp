module main
author unknown
version 1 0 
description ''
variables freqq dir servo_angle temp 

script 460 50 {
whenStarted
comment 'Текущее время'
if false {
  forever {
    sayIt (millisOp) (microsOp)
    waitMillis 100
  }
}
}

script 784 50 {
whenStarted
comment 'Встроенный таймер'
if false {
  resetTimer
  forever {
    sayIt (timer)
    printIt (timer)
    waitMillis 500
  }
}
}

script 93 57 {
whenStarted
comment 'Состояние подключения'
if false {
  forever {
    sayIt (boardType) ('[misc:connectedToIDE]')
    waitMillis 100
  }
}
}

script 322 289 {
whenButtonPressed 'A'
comment 'Проверка базовых gpio'
if false {
  setUserLED true
  waitUntil (not (buttonA))
  setUserLED false
}
}

script 89 291 {
whenStarted
comment 'Моргалка'
if false {
  forever {
    digitalWriteOp 8 false
    waitMillis 50
    digitalWriteOp 8 true
    waitMillis 50
  }
}
}

script 420 546 {
whenStarted
comment 'Проверка акума - типо analogRead'
comment 'Проверка mux'
if false {
  local 'raw' 0
  local 'battery' 0
  forever {
    digitalWriteOp 46 false
    digitalWriteOp 0 false
    digitalWriteOp 39 false
    raw = (analogReadOp 1)
    battery = ((2 * (3300 * raw)) / 1024)
    sayIt (millisOp) raw battery
    waitMillis 500
  }
}
digitalWriteOp 46 false
digitalWriteOp 0 false
digitalWriteOp 39 false
digitalWriteOp 1 false
}

script 86 561 {
whenStarted
comment 'Проверка бузера - типо analogWrite'
if false {
  forever {
    analogWriteOp 4 512
    waitMillis 500
    analogWriteOp 4 50
    waitMillis 500
  }
}
analogWriteOp 4 0
}

script 461 1102 {
whenButtonPressed 'A'
comment 'Проверка бузера - рингтон'
if false {
  comment 'http://syspace.ru/nokiatone/rtttf.htm'
  'play ringtone' 'PinkPanther:d=4,o=5,b=160:8d#,8e,2p,8f#,8g,2p,8d#,8e,16p,8f#,8g,16p,8c6,8b,16p,8d#,8e,16p,8b,2a#,2p,16a,16g,16e,16d,2e'
}
stopTone
}

script 70 1103 {
whenStarted
comment 'Проверка бузера - серена'
if false {
  freqq = 200
  dir = 1
  forever {
    if (and (dir == 1) (freqq > 500)) {
      dir = -1
    } else {
      if (and (dir == -1) (freqq < 200)) {dir = 1}
    }
    startTone freqq
    freqq += dir
    sayIt freqq dir
  }
}
stopTone
}

script 89 1638 {
whenStarted
comment 'Сервы туда сюда'
if false {
  servo_angle = 0
  local 'dir' 1
  forever {
    if (and (dir == 1) (servo_angle > 70)) {
      dir = -1
    } else {
      if (and (dir == -1) (servo_angle < -70)) {dir = 1}
    }
    servo_angle += (dir * 90)
    setServoAngle 48 servo_angle
    setServoAngle 45 servo_angle
    sayIt servo_angle dir
    waitMillis 1000
    printIt servo_angle
  }
}
stopServo
}

script 540 1647 {
whenStarted
comment 'Мотор туда сюда'
if false {
  local 'speed' 0
  local 'dir' 1
  forever {
    if (and (dir == 1) (speed > 99)) {
      dir = -1
    } else {
      if (and (dir == -1) (speed < -99)) {dir = 1}
    }
    if (speed < 0) {
      digitalWriteOp 47 (not dir)
      analogWriteOp 21 (1000 - (speed * -10))
    } else {
      digitalWriteOp 47 dir
      analogWriteOp 21 (speed * 10)
    }
    speed += dir
    sayIt speed dir
    waitMillis 50
  }
}
digitalWriteOp 47 false
digitalWriteOp 21 false
}

script 641 2409 {
whenStarted
comment 'Проверка магнитометра'
if false {
  local 'MagneticField' ('[data:makeList]' 0 0 0)
  local 'Temperature' 0
  forever {
    mag_updateFieldList MagneticField
    Temperature = (mag_getTemperature)
    sayIt (at 1 MagneticField) (at 2 MagneticField) (at 3 MagneticField) Temperature
    waitMillis 500
  }
}
}

script 67 2437 {
whenStarted
comment 'Проверка барометра'
if false {
  local 'Pressure' 0
  local 'Temperature' 0
  forever {
    waitMillis 500
    Pressure = (baro_getPressure)
    Temperature = (baro_getTemperature)
    sayIt Pressure Temperature
  }
}
}

script 70 2769 {
whenStarted
comment 'Проверка акселерометра'
if false {
  local 'acc' ('[data:makeList]' 0 0 0)
  local 'temp' 0
  forever {
    acc_updateAccList acc
    temp = (acc_getTemperature)
    sayIt (at 1 acc) (at 2 acc) (at 3 acc) temp
    waitMillis 200
  }
}
}

script 640 2785 {
whenStarted
comment 'Проверка гироскопа'
if false {
  local 'gyro' ('[data:makeList]' 0 0 0)
  forever {
    gyro_updateSpeedList gyro
    sayIt (at 1 gyro) (at 2 gyro) (at 3 gyro)
    waitMillis 100
  }
}
}

script 71 3156 {
whenStarted
comment 'Проверка карты памяти'
if false {
  comment 'Пин 7 на высокий, это deselect радио'
  digitalWriteOp 7 true
  local 'hello' 'Hello !'
  local 'i' 0
  local 'msg' ''
  sdcard_ClearLog
  forever {
    msg = ('[data:join]' hello ' ' ('[data:convertType]' i 'string'))
    sayIt msg (sdcard_Write msg)
    sdcard_NexLine
    waitMillis 500
    i += 1
  }
}
}

script 440 3591 {
whenStarted
comment 'Проверка gnss'
if false {
  local 'raw' '0'
  local 'lat_lon' '0'
  local 'has_fix' 0
  local 'alt' 0
  local 'numsat' 0
  forever {
    has_fix = (gnss_GetHasFix)
    if (not has_fix) {
      sayIt has_fix (gnss_GetRaw)
    } else {
      lat_lon = (gnss_GetLatLon)
      alt = (gnss_GetHeight)
      numsat = (gnss_GetNumsat)
      sayIt lat_lon alt numsat
    }
    waitMillis 100
  }
}
}

script 76 3597 {
whenStarted
comment 'Без этого GNSS не будет работать'
if false {
  forever {
    gnss_Update
  }
}
}

script 67 4184 {
whenStarted
comment 'Проверка радио передачи'
if false {
  radio_setChannel 1
  radio_setPower false
  forever {
    radio_txString 'nyaaa...' true
    waitMillis 100
  }
}
}

script 459 4188 {
whenStarted
comment 'Проверка радио приема'
if false {
  local 'msg' '0'
  radio_setChannel 1
  radio_setPower false
  forever {
    if (radio_hasRX) {
      msg = (radio_rxString)
      sayIt msg
    }
    waitMillis 10
  }
}
}


module AccelerometerGyroscope
author INNOPOL
version 0 1 
description 'Accelerometer and gyroscope integrated in the MEMS board (LSM6DSL)'

  spec ' ' 'acc_updateAccList' 'acc_updateAccList _' 'auto' 'src'
  spec ' ' 'gyro_updateSpeedList' 'gyro_updateSpeedList _' 'auto' 'src'
  spec 'r' 'acc_getTemperature' 'acc_getTemperature'

to acc_getTemperature {
  return ('[sensors:accTemperature]')
}

to acc_updateAccList vector {
  '[sensors:accAccelerations]' vector
}

to gyro_updateSpeedList vector {
  '[sensors:gyroSpeed]' vector
}


module Barometer
author INNOPOL
version 0 1 
description 'Barometer integrated in the MEMS board (BMP280)'

  spec 'r' 'baro_getPressure' 'baro_getPressure'
  spec 'r' 'baro_getTemperature' 'baro_getTemperature'

to baro_getPressure {
  return ('[sensors:baroPressure]')
}

to baro_getTemperature {
  return ('[sensors:baroTemperature]')
}


module GNSS
author INNOPOL
version 0 1 
description 'GNSSS integrated in the RF-GNSS board (L86-M33_1)'

  spec 'r' 'gnss_GetHasFix' 'gnss_GetHasFix'
  spec 'r' 'gnss_GetHeight' 'gnss_GetHeight'
  spec 'r' 'gnss_GetLatLon' 'gnss_GetLatLon'
  spec 'r' 'gnss_GetNumsat' 'gnss_GetNumsat'
  spec 'r' 'gnss_GetRaw' 'gnss_GetRaw'
  spec ' ' 'gnss_Update' 'gnss_Update'

to gnss_GetHasFix {
  return ('[sensors:gnssHasFix]')
}

to gnss_GetHeight {
  return ('[sensors:gnssHeight]')
}

to gnss_GetLatLon {
  return ('[sensors:gnssLatLon]')
}

to gnss_GetNumsat {
  return ('[sensors:gnssNumSat]')
}

to gnss_GetRaw {
  return ('[sensors:gnssGetRaw]')
}

to gnss_Update {
  return ('[sensors:gnssUpdate]')
}


module Magnetometer
author INNOPOL
version 0 1 
description 'Magnetometer integrated in the MEMS board (QMC5883l)'

  spec ' ' 'mag_updateFieldList' 'mag_updateFieldList _' 'auto' 'src'
  spec 'r' 'mag_getTemperature' 'mag_getTemperature'

to mag_getTemperature {
  return ('[sensors:magTemperature]')
}

to mag_updateFieldList vector {
  '[sensors:magMagneticField]' vector
}


module Radio_RA01S
author INNOPOL
version 0 1 
description 'Radio integrated in the MEMS board (RA01S)'

  spec ' ' 'radio_setChannel' 'radio_setChannel _' 'num' 1
  spec ' ' 'radio_setPower' 'radio_setPower _' 'bool' false
  spec 'r' 'radio_hasRX' 'radio_hasRX'
  spec 'r' 'radio_rxString' 'radio_rxString'
  spec ' ' 'radio_txString' 'radio_txString _ add_LF _' 'str bool' 'nyaa...' true

to radio_hasRX {
  return ('[sensors:radioHasRxString]')
}

to radio_rxString {
  return ('[sensors:radioRxString]')
}

to radio_setChannel ch {
  '[sensors:radioSetCh]' ch
}

to radio_setPower max_pwr {
  '[sensors:radioSetPower]' max_pwr
}

to radio_txString msg next_line {
  '[sensors:radioTxString]' msg next_line
}


module Ringtone Output
author MicroBlocks
version 1 2 
depends Tone 
description 'Plays tunes in RTTTL (Ringtone Text Transfer Language) a language developed by Nokia to store ringtones.
Also known as Nokring.'
variables '_RTTTL default duration' '_RTTTL default octave' '_RTTTL bpm' '_RTTTL song name' 

  spec 'r' '_RTTTL parse control from' '_RTTTL parse control from _' 'str' ''
  spec ' ' 'play ringtone' 'play ringtone _' 'str' 'Pacman:d=16,o=6,b=140:
b5,b,f#,d#,8b,8d#,c,c7,g,f,8c7,8e,b5,b,f#,d#,8b,8d#,32d#,32e,f,32f,32f#,g,32g,32g#,a,8b'
  spec 'r' 'current song name' 'current song name'
  spec ' ' '_RTTTL play note' '_RTTTL play note _' 'str' '8c#'

to '_RTTTL parse control from' 'control section' {
  comment 'Extract control section'
  local 'd' 4
  local 'o' 6
  local 'b' 63
  repeatUntil ((size (v 'control section')) == 0) {
    local 'next separator' ('[data:find]' ',' (v 'control section'))
    if ((v 'next separator') == -1) {
      'next separator' = (size (v 'control section'))
    }
    local 'to process' ('[data:copyFromTo]' (v 'control section') 1 (v 'next separator'))
    'control section' = ('[data:copyFromTo]' (v 'control section') ((v 'next separator') + 1))
    'next separator' = ('[data:find]' ',' (v 'to process'))
    if ((v 'next separator') == -1) {
      'next separator' = ((size (v 'to process')) + 1)
    }
    if (('[data:find]' 'd' (v 'to process')) > 0) {
      d = ('[data:copyFromTo]' (v 'to process') (('[data:find]' '=' (v 'to process')) + 1) ((v 'next separator') - 1))
    } (('[data:find]' 'b' (v 'to process')) > 0) {
      b = ('[data:copyFromTo]' (v 'to process') (('[data:find]' '=' (v 'to process')) + 1) ((v 'next separator') - 1))
    } (('[data:find]' 'o' (v 'to process')) > 0) {
      o = ('[data:copyFromTo]' (v 'to process') (('[data:find]' '=' (v 'to process')) + 1) ((v 'next separator') - 1))
    }
  }
  return ('[data:makeList]' d o b)
}

to '_RTTTL play note' note {
  local 'duration' ''
  local 'note name' ''
  local 'octave' (v '_RTTTL default octave')
  local 'ms / whole note' (240000 / (v '_RTTTL bpm'))
  local 'isDotted' (('[data:find]' '.' note) > -1)
  note = ('_trimmedLowercase' note)
  if (note == '') {
    comment 'empty note string; skip'
    return 0
  }
  comment 'parse duration value, if there is one'
  repeatUntil (or (('[data:unicodeAt]' 1 note) < 48) (('[data:unicodeAt]' 1 note) > 57)) {
    duration = ('[data:join]' duration (at 1 note))
    note = ('[data:copyFromTo]' note 2)
  }
  if (duration == '') {
    duration = (v '_RTTTL default duration')
  }
  comment 'parse note name'
  if (or (('[data:find]' '#' note) > -1) (('[data:find]' '_' note) > -1)) {
    'note name' = ('[data:copyFromTo]' note 1 2)
  } else {
    'note name' = (at 1 note)
  }
  note = ('[data:copyFromTo]' note ((size (v 'note name')) + 1))
  comment 'deal with dotted notes'
  if isDotted {
    duration = ((((v 'ms / whole note') / duration) * 15) / 10)
  } else {
    duration = ((v 'ms / whole note') / duration)
  }
  comment 'parse octave, if there is one'
  if (note != '') {
    octave = (at 1 note)
  }
  'play tone' (v 'note name') (octave - 4) duration
}

to 'current song name' {
  return (v '_RTTTL song name')
}

to 'play ringtone' RTTTL {
  comment 'Initialize frequency map.'
  ignoreArgs ('_baseFreqForNote' 'c')
  comment 'Remove song name'
  '_RTTTL song name' = ('[data:copyFromTo]' RTTTL 1 (('[data:find]' ':' RTTTL) - 1))
  RTTTL = ('[data:copyFromTo]' RTTTL ((size (v '_RTTTL song name')) + 2))
  local 'control' ('_RTTTL parse control from' ('[data:copyFromTo]' RTTTL 1 (('[data:find]' ':' RTTTL) - 1)))
  '_RTTTL default duration' = (at 1 control)
  '_RTTTL default octave' = (at 2 control)
  '_RTTTL bpm' = (at 3 control)
  RTTTL = ('[data:copyFromTo]' RTTTL (('[data:find]' ':' RTTTL) + 1))
  repeatUntil ((size RTTTL) == 0) {
    local 'next separator' ('[data:find]' ',' RTTTL)
    if ((v 'next separator') == -1) {
      'next separator' = ((size RTTTL) + 1)
    }
    local 'next note' ('[data:copyFromTo]' RTTTL 1 ((v 'next separator') - 1))
    RTTTL = ('[data:copyFromTo]' RTTTL ((v 'next separator') + 1))
    '_RTTTL play note' (v 'next note')
  }
  '_RTTTL song name' = ''
}


module SDCard
author INNOPOL
version 0 1 
description 'SDCard integrated in the MCU board (MME type)'

  spec ' ' 'sdcard_ClearLog' 'sdcard_ClearLog'
  spec ' ' 'sdcard_NexLine' 'sdcard_NexLine'
  spec 'r' 'sdcard_Write' 'sdcard_Write _' 'str' 'text'

to sdcard_ClearLog {
  '[sensors:sdcardClearLog]'
}

to sdcard_NexLine {
  '[sensors:sdcardNextLine]'
}

to sdcard_Write msg {
  return ('[sensors:sdcardLogString]' msg)
}


module Servo Output
author MicroBlocks
version 1 1 
tags servo motor angle rotation position 
description 'Control both positional (angle) and rotational servo motors.'
variables _servoPin _servoPulseWidth 

  spec ' ' 'setServoAngle' 'set servo _ to _ degrees (-90 to 90)' 'num num' 1 90
  spec ' ' 'setServoSpeed' 'set servo _ to speed _ (-100 to 100)' 'num num' 1 100
  spec ' ' 'stopServo' 'stop servo _' 'num' 1
  spec 'r' '_servoIndex' '_servoIndex _' 'num' 1
  spec ' ' '_servoPulse' '_servoPulse pin _ usecs _' 'num num' 1 1500
  spec ' ' '_servoUpdateLoop' '_servoUpdateLoop'

to '_servoIndex' which {
  if (_servoPin == 0) {
    _servoPin = ('[data:makeList]')
    _servoPulseWidth = ('[data:makeList]')
    sendBroadcast '_servoUpdateLoop'
  }
  local 'i' ('[data:find]' which _servoPin)
  if (i < 0) {
    comment 'Add new pin'
    '[data:addLast]' which _servoPin
    '[data:addLast]' '1500' _servoPulseWidth
    i = (size _servoPin)
  }
  return i
}

to '_servoPulse' pin usecs {
  if (usecs == 0) {
    comment 'Servo stopped; do nothing'
    return 0
  }
  usecs = (maximum 850 (minimum usecs 2150))
  comment 'Split wait into a long wait followed by a wait of <= 30 usecs for greater accuracy'
  local 'endTime' ((microsOp) + usecs)
  digitalWriteOp pin true
  waitMicros (usecs - 30)
  waitMicros (endTime - (microsOp))
  digitalWriteOp pin false
}

to '_servoUpdateLoop' {
  forever {
    if (_servoPin != 0) {
      comment 'If the _servoPin list is not 0, update the servos'
      for i (size _servoPin) {
        local 'pin' (at i _servoPin)
        local 'usecs' (at i _servoPulseWidth)
        if (and (pin >= 0) (usecs != 0)) {
          '_servoPulse' pin usecs
        }
      }
      waitMillis 15
    }
  }
}

to setServoAngle which degrees optionalReverse {
  local 'reversed' false
  if ((pushArgCount) > 2) {
    reversed = optionalReverse
  }
  if reversed {
    degrees = (0 - degrees)
  }
  local 'pulseWidth' (1500 - (10 * degrees))
  if ('[io:hasServo]') {
    '[io:setServo]' which pulseWidth
  } else {
    atPut ('_servoIndex' which) _servoPulseWidth pulseWidth
  }
}

to setServoSpeed which speed optionalReverse {
  local 'reversed' false
  if ((pushArgCount) > 2) {
    reversed = optionalReverse
  }
  if reversed {
    speed = (0 - speed)
  }
  local 'pulseWidth' (1500 - (10 * speed))
  if ((absoluteValue speed) < 2) {
    pulseWidth = 0
  }
  if ('[io:hasServo]') {
    '[io:setServo]' which pulseWidth
  } else {
    atPut ('_servoIndex' which) _servoPulseWidth pulseWidth
  }
}

to stopServo which {
  if ('[io:hasServo]') {
    '[io:setServo]' which 0
  } else {
    atPut ('_servoIndex' which) _servoPulseWidth 0
  }
}


module Tone Output
author MicroBlocks
version 1 8 
tags tone sound music audio note speaker 
choices tone_NoteName c 'c#' d 'd#' e f 'f#' g 'g#' a 'a#' b 
description 'Audio tone generation. Make music with MicroBlocks!'
variables _tonePin _toneInitalized _toneLoopOverhead _toneNoteNames _toneArezzoNotes _toneFrequencies 

  spec ' ' 'play tone' 'play note _ octave _ for _ ms' 'str.tone_NoteName num num' 'c' 0 500
  spec ' ' 'playMIDIKey' 'play midi key _ for _ ms' 'num num' 60 500
  spec ' ' 'play frequency' 'play frequency _ for _ ms' 'num num' 261 500
  space
  spec ' ' 'startTone' 'start tone _ Hz' 'num' 440
  spec ' ' 'stopTone' 'stop tone'
  space
  spec ' ' 'attach buzzer to pin' 'attach buzzer to pin _' 'auto' ''
  space
  spec 'r' '_measureLoopOverhead' '_measureLoopOverhead'
  spec 'r' '_baseFreqForNote' '_baseFreqForNote _' 'auto' 'c'
  spec 'r' '_baseFreqForSemitone' '_baseFreqForSemitone _' 'num' 0
  spec ' ' '_toneLoop' '_toneLoop _ for _ ms' 'num num' 440000 100
  spec 'r' '_trimmedLowercase' '_trimmedLowercase _' 'str' 'A. b C...'

to '_baseFreqForNote' note {
  comment 'Return the frequency for the given note in the middle-C octave
scaled by 1000. For example, return 440000 (440Hz) for A.
Note names may be upper or lower case. Note names
may be followed by # for a sharp or b for a flat.'
  local 'normalized note' ('_trimmedLowercase' note)
  if (_toneNoteNames == 0) {
    _toneNoteNames = ('[data:makeList]' 'c' 'c#' 'd' 'd#' 'e' 'f' 'f#' 'g' 'g#' 'a' 'a#' 'b' 'c_' 'db' 'd_' 'eb' 'e_' 'e#' 'f_' 'gb' 'g_' 'ab' 'a_' 'bb' 'b_' 'b#')
    _toneArezzoNotes = ('[data:makeList]' 'do' 'do#' 're' 're#' 'mi' 'fa' 'fa#' 'sol' 'sol#' 'la' 'la#' 'si' 'do_' 'dob' 're_' 'reb' 'mi_' 'mi#' 'fa_' 'solb' 'sol_' 'lab' 'la_' 'sib' 'si_' 'si#')
  }
  if (('[data:find]' (v 'normalized note') _toneArezzoNotes) > 0) {
    return ('_baseFreqForSemitone' ('[data:find]' (v 'normalized note') _toneArezzoNotes))
  } else {
    return ('_baseFreqForSemitone' ('[data:find]' (v 'normalized note') _toneNoteNames))
  }
}

to '_baseFreqForSemitone' semitone {
  if (_toneFrequencies == 0) {_toneFrequencies = ('[data:makeList]' 261626 277183 293665 311127 329628 349228 369994 391995 415305 440000 466164 493883 246942 277183 277183 311127 311127 349228 329628 369994 369994 415305 415305 466164 466164 523252)}
  if (and (1 <= semitone) (semitone <= (size _toneFrequencies))) {
    return (at semitone _toneFrequencies)
  } else {
    comment 'Bad note name; return 10 Hz'
    return 10000
  }
}

to '_measureLoopOverhead' {
  comment 'Measure the loop overhead on this device'
  local 'halfCycle' 100
  local 'startT' (microsOp)
  repeat 100 {
    digitalWriteOp _tonePin false
    waitMicros halfCycle
    digitalWriteOp _tonePin false
    waitMicros halfCycle
  }
  local 'usecs' ((microsOp) - startT)
  return ((usecs - 20000) / 200)
}

to '_toneLoop' scaledFreq ms {
  if (_toneInitalized == 0) {'attach buzzer to pin' ''}
  if ('[io:hasTone]') {
    '[io:playTone]' _tonePin (scaledFreq / 1000)
    waitMillis ms
    '[io:playTone]' _tonePin 0
  } else {
    local 'halfCycle' ((500000000 / scaledFreq) - _toneLoopOverhead)
    local 'cycles' ((ms * 500) / halfCycle)
    repeat cycles {
      digitalWriteOp _tonePin true
      waitMicros halfCycle
      digitalWriteOp _tonePin false
      waitMicros halfCycle
    }
  }
}

to '_trimmedLowercase' s {
  comment 'Return a copy of the given string without whitespace
or periods and all lowercase.'
  local 'result' (newList (size s))
  '[data:delete]' 'all' result
  for i (size s) {
    local 'ch' ('[data:unicodeAt]' i s)
    if (and (ch > 32) (ch != 46)) {
      if (and (65 <= ch) (ch <= 90)) {ch = (ch + 32)}
      '[data:addLast]' ch result
    }
  }
  return ('[data:unicodeString]' result)
}

to 'attach buzzer to pin' pinNumber {
  if (pinNumber == '') {
    comment 'Pin number not specified; use default pin for this device'
    if ((boardType) == 'Citilab ED1') {
      _tonePin = 26
    } ((boardType) == 'M5Stack-Core') {
      _tonePin = 25
    } ((boardType) == 'M5StickC') {
      _tonePin = 26
    } ((boardType) == 'Calliope') {
      digitalWriteOp 23 true
      digitalWriteOp 24 true
      _tonePin = 25
    } ((boardType) == 'D1-Mini') {
      _tonePin = 12
    } else {
      _tonePin = -1
    }
  } else {
    _tonePin = pinNumber
  }
  _toneLoopOverhead = ('_measureLoopOverhead')
  _toneInitalized = (booleanConstant true)
}

to 'play frequency' freq ms {
  '_toneLoop' (freq * 1000) ms
}

to 'play tone' note octave ms {
  local 'freq' ('_baseFreqForNote' note)
  if (freq <= 10000) {
    waitMillis ms
    return 0
  }
  if (octave < 0) {
    repeat (absoluteValue octave) {
      freq = (freq / 2)
    }
  }
  repeat octave {
    freq = (freq * 2)
  }
  '_toneLoop' freq ms
}

to playMIDIKey key ms {
  local 'freq' ('_baseFreqForSemitone' ((key % 12) + 1))
  local 'octave' ((key / 12) - 5)
  if (octave < 0) {
    repeat (absoluteValue octave) {
      freq = (freq / 2)
    }
  }
  repeat octave {
    freq = (freq * 2)
  }
  '_toneLoop' freq ms
}

to startTone freq {
  if (_toneInitalized == 0) {'attach buzzer to pin' ''}
  if ('[io:hasTone]') {'[io:playTone]' _tonePin freq}
}

to stopTone {
  startTone 0
}

